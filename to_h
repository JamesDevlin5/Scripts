#!/usr/bin/env python3

import argparse
from enum import Enum


def args():
    parser = argparse.ArgumentParser(
        description='Convert a number of bytes into a human-readable format')
    parser.add_argument(
        '-b',
        '--bits',
        action='store_true',
        help='Indicates the input number is a count of bits, not bytes')
    parser.add_argument(
        'num',
        type=int,
        help='The number of bytes to convert into a human-readable form',
        metavar='NUM')
    return parser


class Size(Enum):
    Bit = 0
    Byte = 1
    KiloByte = 2
    MegaByte = 3
    GigaByte = 4
    TeraByte = 5
    PetaByte = 6


def check_bits(num):
    if num < 8:
        return f"{num} b"
    else:
        return False


# 1 B = 8 bits
# 1 KB = 1,024 bytes
# 1 MB = 1,024 KB
# 1 GB = 1,024 MB
# 1 TB
# 1 PB
# Input: Number of bytes
# Output: Human-readable form of the same size amount
def to_h(num):
    if num < 1024:
        return f"{num} B"
    num = round(num / 1024, 2)
    if num < 1024:
        return f"{num} KB"
    num = round(num / 1024, 2)
    if num < 1024:
        return f"{num} MB"
    num = round(num / 1024, 2)
    if num < 1024:
        return f"{num} TB"
    num = round(num / 1024, 2)
    if num < 1024:
        return f"{num} PB"
    return str(num)


def convert(num, bits=False):
    if bits:
        b_val = check_bits(num)
        if b_val:
            return b_val
        else:
            num = round(num / 8, 2)
    return to_h(num)


if __name__ == "__main__":
    args = args().parse_args()
    num, bits = args.num, args.bits
    if num < 0:
        print("Cannot convert a negative number to a size...")
        exit(1)
    print(convert(num, bits))
