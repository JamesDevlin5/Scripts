#!/usr/bin/env python3

import argparse
from enum import Enum


def args():
    parser = argparse.ArgumentParser(
        description='Convert a number of bytes into a human-readable format')
    parser.add_argument(
        '-b',
        '--bits',
        action='store_true',
        help='Indicates the input number is a count of bits, not bytes')
    parser.add_argument('-r',
                        '--round',
                        default=2,
                        type=int,
                        help='The number of decimal places to round to',
                        metavar='DECIMAL_PLACES')
    parser.add_argument(
        'num',
        type=int,
        help='The number of bytes to convert into a human-readable form',
        metavar='NUM')
    return parser


class Size(Enum):
    Bit = 0
    Byte = 1
    KiloByte = 2
    MegaByte = 3
    GigaByte = 4
    TeraByte = 5
    PetaByte = 6

    @staticmethod
    def symbols():
        return {
            Size.Bit: 'b',
            Size.Byte: 'B',
            Size.KiloByte: 'KB',
            Size.MegaByte: 'MB',
            Size.GigaByte: 'GB',
            Size.TeraByte: 'TB',
            Size.PetaByte: 'PB'
        }


# 1 B = 8 bits
# 1 KB = 1,024 bytes
# 1 MB = 1,024 KB
# 1 GB = 1,024 MB
# 1 TB
# 1 PB
# Input: Number of bytes
# Output: Human-readable form of the same size amount
def to_h(num, rnd=2):
    smaller = lambda n: round(n / 1024, rnd)
    if num < 1024:
        return (num, Size.Byte)
    num = smaller(num)
    if num < 1024:
        return (num, Size.KiloByte)
    num = smaller(num)
    if num < 1024:
        return (num, Size.MegaByte)
    num = smaller(num)
    if num < 1024:
        return (num, Size.TeraByte)
    num = smaller(num)
    return (num, Size.PetaByte)


def convert(num, bits=False, rnd=2):
    if bits:
        if num < 8:
            return (num, Size.Bit)
        else:
            num = round(num / 8, rnd)
    return to_h(num, rnd)


def print_size(num, size):
    sym = Size.symbols()[size]
    print(f"{num} {sym}")


if __name__ == "__main__":
    args = args().parse_args()
    num, bits, rnd = args.num, args.bits, args.round
    if num < 0:
        print("Cannot convert a negative number to a size...")
        exit(1)
    print_size(*convert(num, bits, rnd))
