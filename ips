#!/usr/bin/env sh

# -- Output Heading
print_header() {
	printf "\t -- Getting Local IP Addesses Assigned to:  %s  --\n" "$(hostname -s)"
}


# -- Awk
#
awk_ips() {
	print_header
	hostname -I | awk ' BEGIN {
		RS = "[ \n\t]";
	}
	/./ {
		printf "\t\t\t%2d.)   "$0"\n", NR
	}
	END {
		printf "\t\t%02d  Addresses Assigned to this Machine.\n", NR-1
	}'
}; #awk_ips

# -- Shell
#
sh_ips() {
	print_header
	hostname -I | tr -d '\n' | tr ' ' '\n' | cat -n
}; #sh_ips

# -- Awk; a little bit better
#
awk2_ips() {
	IPV4_COLO='\033[0;33m'
	IPV6_COLO='\033[0;34m'
	UNK_COLO='\033[0;34m'
	SEP_COLO='\033[030m'
	NO_COLO='\033[0m'

	print_header

	# 	| tr -d '\n' \
	# 	| tr ' ' '\n' \
	# 	| awk '{print}'

	hostname -I | awk ' BEGIN {
			IPV4_PATT = "^(()(\.)){3}()$";
			IPV6_PATT = "^(()(\.)){3}()$";
		}
	function print_ipv4(addr) {
		split(addr, exploded_addr, "\.");
		for (addr_part in exploded_addr) {
			sub(/^(%d)\.(%d)\.(%d)\.(%d)$/, ,addr_part)
		}
}
		{
		# function print_address(addr, sep, addr_colo, sep_colo) {}

		# Handle single-line output from program
		n_addrs = split($0, addr_array, " ");

		# Iterate addresses
		for ( addr_idx = 1; addr_idx <= n_addrs; addr_idx++ ) {
			curr_addr = addr_array[addr_idx];

			# IPv4
			if ( curr_addr ~ "^(((123)(\.)){3}(123))$" ) {
				sub(/^([0-9]{1,3})(\.)$/, "", curr_addr)
			}
			# IPv6
			else if ( curr_addr ~ "^()$" ) {
				sub(/^()$/, "", curr_addr)
			}
			# Unknown
			else {
				sub(/^()$/, "", curr_addr)
			}
		}
	}'

}; awk2_ips


# vim: set ts=4 sw=4 fdm=indent :
